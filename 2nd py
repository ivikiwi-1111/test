import RPi.GPIO as GPIO
import time

dac = [26, 19, 13, 6, 5, 11, 9, 10]
bits = len (dac)
levels = 2**bits
maxVoltage = 3.3
troykaModule = 17
comparator = 4
s = [128, 64, 32, 16, 8, 4, 2, 1]
sum = 0


def decimal2binary (decimal):
    return [int(bit) for bit in bin(decimal)[2:].zfill(bits)]
def bin2dac(value):
    signal = decimal2binary(value)
    GPIO.output(dac, signal)
    return signal



GPIO.setmode (GPIO.BCM)
GPIO.setup (dac, GPIO.OUT, initial = GPIO.LOW)
GPIO.setup(troykaModule, GPIO.OUT, initial = GPIO.HIGH)
GPIO.setup(comparator, GPIO.IN)


def adc ():
    for i in range (len(s)):
        global Value
        global sum
        value = 0
        value = sum + s[i]
        signal = bin2dac(value)
        voltage  = value / levels * maxVoltage
        time.sleep(0.005)
        comparatorValue = GPIO.input(comparator)
        if comparatorValue == 1:
            sum += s[i]
        if i == 7:
            print("ADC value = {:^3} -> {}, input voltage = {:.2f}".format(value, signal, voltage))
            print(i)
            break

try:
    adc()

    #except KeyboardInterrupt:
    print ("The program was stopped by the keyboard")
#else:
    #print ("No exceptions")
finally:
    GPIO.output(dac,GPIO.LOW)
    GPIO.cleanup(dac)
    print("GPIO cleanup completed")
